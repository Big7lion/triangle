{"version":3,"sources":["main.js"],"names":["Triangle","configs","steps","wrapperWidth","wrapperHeight","color","canvas","document","createElement","height","width","style","classList","add","id","body","appendChild","ctx","getContext","fillStyle","radius","clientWidth","centerPoint","x","y","_drawPoint","originPoints","Math","cos","PI","forEach","point","fillRect","floor","random","round","count","_pickPoint","originPoint","_randomOrigin","newPoint","requestAnimationFrame","iterate","drawOriginPoints","clearRect","clear","start","triangle","init","querySelector","addEventListener","restart"],"mappings":"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","file":"main.e381e86f.map","sourceRoot":"..","sourcesContent":["import \"./index.scss\";\nclass Triangle {\n  constructor(configs = {}) {\n    const {\n      steps = 8000,\n      wrapperWidth = 500,\n      wrapperHeight = 500,\n      color = \"black\",\n    } = configs;\n    this.steps = steps;\n    this.wrapperHeight = wrapperHeight;\n    this.wrapperWidth = wrapperWidth;\n    this.color = color;\n  }\n\n  init() {\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.height = this.wrapperHeight;\n    this.canvas.width = this.wrapperWidth;\n    this.canvas.style.height = this.wrapperHeight + \"px\";\n    this.canvas.style.width = this.wrapperWidth + \"px\";\n    this.canvas.classList.add(\"triangle\");\n    this.canvas.id = \"triangle\";\n    document.body.appendChild(this.canvas);\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.ctx.fillStyle = this.color;\n  }\n\n  drawOriginPoints() {\n    const radius = this.canvas.clientWidth / 2;\n    // this.ctx.beginPath()\n    // this.ctx.arc(radius, radius, radius, 0, Math.PI * 2, true)\n    // this.ctx.stroke()\n    const centerPoint = { x: radius, y: radius };\n    this._drawPoint(centerPoint.x, centerPoint.y);\n    this.originPoints = [\n      { x: radius, y: 0 },\n      {\n        x: centerPoint.x - radius * Math.cos(Math.PI / 6),\n        y: centerPoint.y + radius / 2,\n      },\n      {\n        x: centerPoint.x + radius * Math.cos(Math.PI / 6),\n        y: centerPoint.y + radius / 2,\n      },\n    ];\n    this.originPoints.forEach((point) => {\n      this._drawPoint(point.x, point.y);\n    });\n  }\n\n  _drawPoint(x, y) {\n    this.ctx.fillRect(x - 0.5, y - 0.5, 1, 1);\n  }\n\n  _randomOrigin() {\n    return this.originPoints[Math.floor(Math.random() * 3)];\n  }\n\n  _pickPoint() {\n    return {\n      x: Math.round(Math.random() * this.canvas.clientWidth),\n      y: Math.round(Math.random() * this.canvas.clientWidth),\n    };\n  }\n\n  iterate(point = null, count = 0) {\n    if (!point) {\n      point = this._pickPoint();\n    }\n    if (count > this.steps) return;\n    const originPoint = this._randomOrigin();\n    const newPoint = {\n      x: (originPoint.x + point.x) / 2,\n      y: (originPoint.y + point.y) / 2,\n    };\n    this._drawPoint(newPoint.x, newPoint.y);\n    if (count % 60 === 0) {\n      window.requestAnimationFrame(() => {\n        this.iterate(newPoint, count + 1);\n      });\n    } else {\n      this.iterate(newPoint, count + 1);\n    }\n  }\n\n  start() {\n    this.drawOriginPoints();\n    this.iterate();\n  }\n\n  clear() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  restart() {\n    this.clear()\n    this.start()\n  }\n}\n\nconst triangle = new Triangle();\n\ntriangle.init();\ntriangle.start();\n\n\ndocument.querySelector('.rerun').addEventListener('click', () => {\n  triangle.restart()\n})\n"]}